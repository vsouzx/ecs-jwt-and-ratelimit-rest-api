name: "Terraform Workflow"

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      aws-region:
        type: string
        required: true
      destroy:
        type: boolean
        required: true

jobs:
  terraform:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ inputs['aws-region'] }}
      ENVIRONMENT: ${{ inputs.environment }}
      DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ vars.DOCKERHUB_TOKEN }}
      IMAGE_NAME: ${{ github.event.repository.name }}
      IMAGE_REPO: ${{ vars.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}


    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ----- Build & Push Docker image -----
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Hub login
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Compute image tags / metadata
        id: meta
        run: |
          SHORT_SHA="${GITHUB_SHA::7}"
          IMAGE_TAG="${ENVIRONMENT}-${SHORT_SHA}"
          IMAGE_URI="${IMAGE_REPO}:${IMAGE_TAG}"
          # saída para próximos steps
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "image_tag=${IMAGE_TAG}"   >> $GITHUB_OUTPUT
          echo "image_uri=${IMAGE_URI}"   >> $GITHUB_OUTPUT

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: ./app
          file: ./app/Dockerfile
          push: true
          provenance: false
          platforms: linux/amd64  
          tags: |
            ${{ env.IMAGE_REPO }}:${{ env.ENVIRONMENT }}-latest

      # ----- Terraform -----
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ASSUME_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform init
        working-directory: infra
        run: |
          terraform init \
            -backend-config="bucket=${{ vars.STATEFILE_BUCKET }}" \
            -backend-config="key=${{ github.event.repository.name }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ vars.DYNAMO_DB_TERRAFORM_LOCK }}"

      - name: Terraform workspace
        working-directory: infra
        run: |
          terraform workspace select ${{ env.ENVIRONMENT }} || terraform workspace new ${{ env.ENVIRONMENT }}

      - name: Terraform Plan or Destroy
        working-directory: infra
        env:
          # disponibiliza a image_uri para os módulos do TF
          TF_VAR_image_uri: ${{ steps.meta.outputs.image_uri }}
        run: |
          if [ "${{ inputs.destroy }}" = "true" ]; then
            echo "Destroying resources..."
            terraform destroy -var-file="./envs/${{ env.ENVIRONMENT }}/terraform.tfvars" -auto-approve
          else
            echo "Planning and applying resources..."
            terraform plan -var-file="./envs/${{ env.ENVIRONMENT }}/terraform.tfvars" -out="${{ env.ENVIRONMENT }}.plan"
            terraform apply "${{ env.ENVIRONMENT }}.plan"
          fi
